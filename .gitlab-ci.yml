---
variables:
  SSH_USER: gitlab
  DELIVERY_PATH: /home/ubuntu/delivery/
  STABLE_VERSION: "0.1"
  CURRENT_VERSION: $STABLE_VERSION.$CI_COMMIT_SHORT_SHA-$CI_COMMIT_REF_SLUG

create_ssh_key:
  image: ubuntu:20.04
  stage: .pre
  tags:
    - testplatform
  before_script:
    - which ssh-keygen &> /dev/null || (apt-get update -y && apt-get install -y openssh-client)
  script:
    - echo y | ssh-keygen -b 2048 -t rsa -q -P "" -f testsplatform/id_rsa
  artifacts:
    name: ssh_key
    paths:
      - testsplatform/id_rsa*

build_ssh_server_image:
  image: ubuntu:20.04
  needs: ["create_ssh_key"]
  stage: build
  tags:
    - testplatform-docker
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    - cp -u testsplatform/id_rsa* $IMAGE_PATH/
  script:
    - docker build --build-arg VERSION=$VERSION --build-arg REGISTRY="$CI_REGISTRY_IMAGE/" -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$STABLE_VERSION $IMAGE_PATH
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:$STABLE_VERSION $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
    - docker push -a $CI_REGISTRY_IMAGE/$IMAGE_NAME
  parallel:
    matrix:
      - IMAGE_NAME: "ssh_ubuntu_16"
        VERSION: "16.04"
        IMAGE_PATH: "testsplatform/ssh_server"
      - IMAGE_NAME: "ssh_ubuntu_18"
        VERSION: "18.04"
        IMAGE_PATH: "testsplatform/ssh_server"
      - IMAGE_NAME: ansible
        VERSION: "3.15.0"
        IMAGE_PATH: testsplatform/ansible

build_prerequisite_images:
  image: ubuntu:20.04
  needs: ["build_ssh_server_image"]
  stage: build
  tags:
    - testplatform-docker
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg VERSION=$STABLE_VERSION --build-arg REGISTRY="$CI_REGISTRY_IMAGE/" -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$STABLE_VERSION $IMAGE_PATH
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:$STABLE_VERSION $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
    - docker push -a $CI_REGISTRY_IMAGE/$IMAGE_NAME
  parallel:
    matrix:
      - IMAGE_NAME: bastion
        IMAGE_PATH: testsplatform/bastion
      - IMAGE_NAME: regulator
        IMAGE_PATH: testsplatform/regulator

build_images:
  image: ubuntu:20.04
  stage: build
  needs: ["build_prerequisite_images"]
  tags:
    - testplatform-docker
  before_script:
    - mkdir -p ~/.docker/cli-plugins/
    - docker compose version || (wget -q -O ~/.docker/cli-plugins/docker-compose https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 && chmod +x ~/.docker/cli-plugins/docker-compose)
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    - echo -e "STABLE_VERSION=$STABLE_VERSION\nCURRENT_VERSION=$CURRENT_VERSION\nREGISTRY=$CI_REGISTRY_IMAGE/\nFROM_DATE=$(date '+%Y%m%d')\nTO_DATE=$(date '+%Y%m%d')" > testsplatform/$SERVER/.env
  script:
    - cd testsplatform/$SERVER/
    - docker compose build
  parallel:
    matrix:
      - SERVER: [simple_bastion, double_bastion]

package:
  image: ubuntu:20.04
  stage: build
  variables:
    YQ_VERSION: v4.2.0
    YQ_BINARY: yq_linux_amd64
  tags:
    - testplatform
  before_script:
    - which yq &> /dev/null || (apt-get update -y && apt-get install -y wget && wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY} -O /usr/bin/yq && chmod +x /usr/bin/yq)
  script:
    - yq --version
    - bash ./prodconf.sh
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - "*"
    exclude:
      - ".gitlab*"
      - "**/*.template.yml"

test_server:
  image: ubuntu:20.04
  stage: test
  needs: ["build_images"]
  tags:
    - testplatform-docker
  before_script:
    - which tee &> /dev/null || (apt-get update && apt-get install -y tee)
    - mkdir -p ~/.docker/cli-plugins/
    - docker compose version || (wget -q -O ~/.docker/cli-plugins/docker-compose https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 && chmod +x ~/.docker/cli-plugins/docker-compose)
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    - docker pull $CI_REGISTRY_IMAGE/ansible:$STABLE_VERSION
    - echo -e "STABLE_VERSION=$STABLE_VERSION\nCURRENT_VERSION=$CURRENT_VERSION\nREGISTRY=$CI_REGISTRY_IMAGE/\nFROM_DATE=$(date '+%Y%m%d')\nTO_DATE=$(date '+%Y%m%d')" > testsplatform/$SERVER/.env
  script:
    - docker compose --project-directory "testsplatform/$SERVER/" up -d --wait
    - docker run --network=${SERVER}_external_network -v $PWD:/playbooks/ $CI_REGISTRY_IMAGE/ansible:$STABLE_VERSION -i /playbooks/${SERVER}/${SERVER}.yml -e filter_hour=${PROCESS_HOUR} /playbooks/get_files_${SERVER}.yml | tee get_files_${SERVER}_${PROCESS_HOUR}.log
  after_script:
    - docker compose --project-directory "testsplatform/$SERVER/" down
  artifacts:
    paths:
      - get_files_${SERVER}_${PROCESS_HOUR}.log
  parallel:
    matrix:
      - PROCESS_HOUR: [00, 10]
        SERVER: [simple_bastion, double_bastion]
